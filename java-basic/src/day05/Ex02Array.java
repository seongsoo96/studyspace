package day05;
// 배열(Array)
// 배열이란, 똑같은 데이터타입을 지정된 크기만큼 모아둔 하나의 데이터타입이다.
// 배열은 우리가 그 안에 있는 변수들을 이름을 따로 붙여주는것이 아니라
// "배열의 0번", "배열의 1번", "배열의 2번" 요런식으로 지칭해서
// 값을 할당하거나 호출하는 방법이다.

// 배열은 다음과 같이 선언한다
// 데이터타입[] 배열이름 = new 데이터타입[크기];

// 배열에 들어가 있는 변수들은 우리가 요소 혹은 element 라고 부른다.
// 배열에 들어가 있는 element들을 호출할 때에는
// 배열이름[위치번호] 로 호출하게 된다.
// 위치번호는 index 라고 하며, 0부터 시작해서
// 크기-1까지가 index의 범위이다.

// 만약 index가 올바르지 않으면(예시: -1 혹은 크기보다 같거나 크면)
// ArrayIndexOutOfBoundsException이 발생한다!

// 배열의 요소를 초기화 할때는 
// 배열이름[index] = 값;

// 기본형 데이터타입의 배열인 경우, 모든 element는 0으로 초기화된다.

// 참조형 데이터타입의 배열인 경우, 모든 element는 null로 초기화된다.

// 배열의 인덱스나 배열의 크기를 정할때는
// 변수가 상수가 들어갈 수도 있다.

public class Ex02Array {
	public static void main(String[] args) {
		// 크기가 5인 int 배열을 만들어보자
		int[] intArray = new int[5];
		
		// 0번 index에 값을 넣어보자
		intArray[0] = 32;
		
		// 0번 index에 저장된 값을 호출해보자
		System.out.println("intArray[0]: "+intArray[0]);
		
		// for 문을 사용하여 intArray의 내용을 전부 출력해보자
		// 배열의 크기는
		// 배열이름.length 로 알수 있다.
		for(int i = 0; i < intArray.length; i++) {
			System.out.printf("intArray[%d]: %d\n", i, intArray[i]);  
		}
		
		//잘못된 index를 접근할 때에는 다음과같이
		//콘솔에 에러가 발생한다.
		//System.out.println(intArray[5]);
		
		//배열의 단점
		//1. 크기가 고정되어있다.
		//   크기가 고정되어있기 때문에 
		//   예를 들어 크기가 30인 배열에
		//   요소를 추가하고 싶다면?
		//   A. 아예 추가가 안된다고 메시지만 출력
		//   B. 0번 index의 요소를 없애고
		//      1번은 0번으로, 2번은 1번으로.... 29번은 28번으로
		//      옮겨주고 제일 마지막 29번 index에 새로운 요소 추가
		//   C. 크기가 30인 임시 배열을 만들어서 
		//      현재 배열의 내용을 다 복사하고
		//      현재 배열을 크기가 1 늘어난 배열로 다시 초기화
		//      크기가 31이 된 현재 배열엔 아무 내용도 없으므로
		//      임시 배열의 내용을 복사해온다
		//      그리고 제일 마지막 index에 새로운 요소를 추가한다.
		//      이것을 우리는 "동적 할당" 이라고 부른다.
		
		// 2. 우리가 크기를 지정해놓기 때문에, 모든 요소는 0 혹은 null로
		//    초기화가 된다. 
		//    그럼 우리가 무언가를 추가할때, 이미 배열에 존재하면 추가하지
		//    않기로 해보자. 그렇다면 우리가 별도로 작업을 해야 
		//    해당 배열에서 그 요소가 존재하는지 찾을 수 있다.
		//    또한 추가할때의 위치도 우리가 일일이 다 찾아야 한다.
	}
}














